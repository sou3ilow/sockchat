#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('socketchat:server');
var https = require('https');
var ws = require('ws');

/**
 * Get port from environment and store in Express.
 */

var port = app.get('port');
app.set('port', app.get(port));

/**
 * Create HTTP server.
 */
var fs = require('fs');

var option = {
	key:fs.readFileSync('../serverKeys/server.key'),
	cert:fs.readFileSync('../serverKeys/w-jhashi-democa.cert')
}

var server = https.createServer(option, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var wsServer = new ws.Server({
	server: server
});

//var wsServer = new WebSocketServer({
//	host: '0.0.0.0',
//	port: 3002
//});
//
//// 新規接続
//

wsServer.on('connection', app.get('wsconnect'));

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
